
import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javazoom.jl.player.Player;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

public class AnswerPanel extends javax.swing.JPanel {

    List<JTextField> arrayCharacter = new ArrayList<JTextField>();
    String sound, wordString;
    ArrayList<String> wordArray = new ArrayList<>();
    boolean haveSound;
    Integer level = MenuPanelrm.level;
    Integer eval = MenuPanelrm.eval;
    JTextField level7 = new JTextField();

    public AnswerPanel() {
        initComponents();
        level7.setBounds(335, 450, 150, 30);
        show_question();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        ButtonListen = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        meanText = new javax.swing.JLabel();
        suggestText = new javax.swing.JLabel();
        spellText = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        imageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setBackground(new java.awt.Color(255, 255, 51));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/frame/icons8_delete_sign_filled_25px_1.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ButtonListen.setBackground(new java.awt.Color(255, 51, 51));
        ButtonListen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/detail/icons8_high_volume_25px_3.png"))); // NOI18N
        ButtonListen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonListenActionPerformed(evt);
            }
        });

        submit.setBackground(new java.awt.Color(51, 255, 51));
        submit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/detail/icons8_checkmark_filled_25px.png"))); // NOI18N
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        meanText.setText("Dịch nghĩa");
        meanText.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        suggestText.setText("gợi ý");
        suggestText.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        spellText.setText("Phiên âm");
        spellText.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jButton2.setBackground(new java.awt.Color(102, 204, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/detail/icons8_home_25px_1.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(meanText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spellText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(suggestText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(238, 238, 238)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(229, 229, 229)
                        .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ButtonListen, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonListen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(meanText, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(suggestText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spellText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(submit, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(null, "Đáp án: " + wordString);
        nextWord(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ButtonListenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonListenActionPerformed
        playSound();
    }//GEN-LAST:event_ButtonListenActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        submit();
    }//GEN-LAST:event_submitActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFrame parent = Utitilities.findJFrameOf(this);
        if (parent != null) {
            parent.getContentPane().removeAll();
            parent.setContentPane(new MenuPanelrm());
            parent.pack();
        }

    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonListen;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel meanText;
    private javax.swing.JLabel spellText;
    private javax.swing.JButton submit;
    private javax.swing.JLabel suggestText;
    // End of variables declaration//GEN-END:variables

    private void show_question() {
        Connection con = DBUtil.getConnection();
        Statement st;
        ResultSet rs;

        try {
            st = con.createStatement();
            rs = st.executeQuery("SELECT * FROM " + DBUtil.TABLE_NAME + " WHERE id=" + MenuPanelrm.id.get(0));
            while (rs.next()) {
                byte[] img = rs.getBytes("image");
                sound = rs.getString("sound");
                ImageIcon image = new ImageIcon(img);
                Image im = image.getImage();
                Image myImg = im.getScaledInstance(415, 226, Image.SCALE_SMOOTH);
                ImageIcon newImage = new ImageIcon(myImg);
                imageLabel.setIcon(newImage);
                wordString = rs.getString("word");
                meanText.setText("<html><b>Dịch nghĩa: </b>" + rs.getString("mean") + "</html>");
                suggestText.setText("<html><b>Gợi ý: </b>" + rs.getString("suggest") + "</html>");
                spellText.setText("<html><b>Phiên âm: </b>" + rs.getString("spell") + "</html>");

//                hashtagText.setText(rs.getString("hasgtag").substring(0, rs.getString("hasgtag").length() - 1));
//                TypeText.setText(rs.getString("type"));
                haveSound = sound != null;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Word detail false");
        }
        switch (level) {
            case 1:
                break;
            case 2:
                spellText.setVisible(false);
                break;
            case 3:
                spellText.setVisible(false);
                suggestText.setVisible(false);
                break;
            case 4:
                spellText.setVisible(false);
                suggestText.setVisible(false);
                ButtonListen.setVisible(false);
                break;
            case 5:
                spellText.setVisible(false);
                suggestText.setVisible(false);
                ButtonListen.setVisible(false);
                break;
            case 6:
                spellText.setVisible(false);
                suggestText.setVisible(false);
                ButtonListen.setVisible(false);
                meanText.setVisible(false);
                break;
            case 7:
                spellText.setVisible(false);
                suggestText.setVisible(false);
                ButtonListen.setVisible(false);
                meanText.setVisible(false);
                break;
        }

        inputWord();
    }

    private void inputWord() {
        //Dựa vào số kí tự để thiết lập số ô điền vào
        if (level == 7) {
            jPanel1.add(level7);
        } else {
            for (int i = 0; i < wordString.length(); i++) {
                //Tạo 1 ô trống
                arrayCharacter.add(new JTextField());
                //Giới hạn số kí tự được nhập xuống 1
                arrayCharacter.get(i).setDocument(new JTextFieldLimit(1));
                arrayCharacter.get(i);
                arrayCharacter.get(i).setBounds(400 - (int) (wordString.length() / 2) * 27 + 27 * i, 450, 30, 30);
                if (level == 1
                        || level == 2
                        || level == 3
                        || level == 4) {

                    if (i == 0 || i == wordString.length() - 1) {
                        arrayCharacter.get(i).setText(Character.toString(wordString.charAt(i)));
                        arrayCharacter.get(i).setEditable(false);
                    }
                }
                if (Character.toString(wordString.charAt(i)).equals(" ")) {
                    arrayCharacter.get(i).setText(Character.toString(wordString.charAt(i)));
                    arrayCharacter.get(i).setVisible(false);
                }
                jPanel1.add(arrayCharacter.get(i));
            }
        }
    }

    private void nextWord(boolean a) {
        if (a == true) {
            //Query biến đếm pass thêm 1
            DBUtil.incWord(MenuPanelrm.id.get(0));
        }
        MenuPanelrm.id.remove(0);
        if (MenuPanelrm.id.isEmpty()) {
            //Thông báo đã học xong
            JOptionPane.showMessageDialog(null, "Bạn đã hoàn thành bài kiểm tra");
            JFrame parent = Utitilities.findJFrameOf(this);
            if (parent != null) {
                parent.getContentPane().removeAll();
                parent.setContentPane(new MenuPanelrm());
                parent.pack();
            }
        } else {
            JFrame parent = Utitilities.findJFrameOf(this);
            if (parent != null) {
                parent.getContentPane().removeAll();
                parent.setContentPane(new AnswerPanel());
                parent.pack();
            }
        }
    }

    private void playSound() {
        if (haveSound == false) {
            Text2Speech speak = new Text2Speech();
            speak.doSpeak(wordString);
        } else {
            String soundType = sound.substring(sound.length() - 3);
            if (soundType.equals("mp3")) {
                try {
                    FileInputStream so = new FileInputStream(new File(sound));
                    Player player = new Player(so);
                    player.play();
                    player.close();
                } catch (Exception e) {
                }
            } else {
                try {
                    FileInputStream so = new FileInputStream(new File(sound));
                    AudioStream audio = new AudioStream(so);
                    AudioPlayer.player.start(audio);
                } catch (Exception e) {
                }
            }
        }
    }
//Hàm tìm xâu con chung dài nhất

    private String LCS(String X, String Y) {
        int m = X.length();
        int n = Y.length();
        int[][] L = new int[m + 1][n + 1];

        // Following steps build L[m+1][n+1] in bottom up fashion. Note 
        // that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1]  
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0 || j == 0) {
                    L[i][j] = 0;
                } else if (X.charAt(i - 1) == Y.charAt(j - 1)) {
                    L[i][j] = L[i - 1][j - 1] + 1;
                } else {
                    L[i][j] = Math.max(L[i - 1][j], L[i][j - 1]);
                }
            }
        }

        // Following code is used to print LCS 
        int index = L[m][n];
        int temp = index;

        // Create a character array to store the lcs string 
        char[] lcs = new char[index + 1];
//        lcs[index] = '';

        // Start from the right-most-bottom-most corner and 
        // one by one store characters in lcs[] 
        int i = m, j = n;
        while (i > 0 && j > 0) {
            // If current character in X[] and Y are same, then 
            // current character is part of LCS 
            if (X.charAt(i - 1) == Y.charAt(j - 1)) {
                // Put current character in result 
                lcs[index - 1] = X.charAt(i - 1);

                // reduce values of i, j and index 
                i--;
                j--;
                index--;
            } // If not same, then find the larger of two and 
            // go in the direction of larger value 
            else if (L[i - 1][j] > L[i][j - 1]) {
                i--;
            } else {
                j--;
            }
        }

        // Print the lcs 
//        System.out.print("LCS of " + X + " and " + Y + " is ");
        for (int k = 0; k <= temp; k++) {
            System.out.print(lcs[k]);
        }
        String stringlcs = new String(lcs);
        return stringlcs;

    }

    private void submit() {
        boolean success = true;
        if (level == 7) {
            //level  7
            if (!level7.getText().equals(wordString)) {
                success = false;
            }
        } else {
            //các level từ 1-6
            for (int i = 1; i < arrayCharacter.size() - 1; i++) {
                if (!arrayCharacter.get(i).getText().equals(Character.toString(wordString.charAt(i)))) {
                    success = false;
                }
            }
        }
        //Check xem từ nhập đúng chưa :))) để chuyển sang từ khác
        if (success) {
            if (eval == 4) {
                playSound();
                JOptionPane.showMessageDialog(null, spellText.getText());
            }
            nextWord(true);
        } else {
            switch (eval) {
                case 1:
                    if (level == 7) {
                        //level  7
                        playSound();
                        JOptionPane.showMessageDialog(null, "Số chữ cái cần điền: " + wordString.replaceAll("\\s", "").length() + "\n" + spellText.getText());
                    } else {
                        //các level từ 1-6
                        for (int i = 1; i < arrayCharacter.size() - 1; i++) {
                            if (arrayCharacter.get(i).getText().equals(Character.toString(wordString.charAt(i)))) {
                                arrayCharacter.get(i).setForeground(Color.GREEN);
                            } else {
                                if (!arrayCharacter.get(i).getText().equals("")) {
                                    arrayCharacter.get(i).setForeground(Color.RED);
                                }
                            }
                        }
                        if (level == 2 || level == 3) {
                            JOptionPane.showMessageDialog(null, spellText.getText());
                        } else if (level == 4 || level == 5 || level == 6) {
                            playSound();
                            JOptionPane.showMessageDialog(null, spellText.getText());
                        }
                    }
                    break;
                case 2:
                    if (level == 7) {
                        //level  7
                        //Thuật toán LCS
//                        JOptionPane.showMessageDialog(null, "Xâu con chung dài nhất: " + LCS(level7.getText(), wordString.replaceAll("\\s", "")));
                        JOptionPane.showMessageDialog(null, "Xâu con chung dài nhất: " + LCS(level7.getText(), wordString));
                    } else {
                        //các level từ 1-6
                        for (int i = 1; i < arrayCharacter.size() - 1; i++) {
                            if (arrayCharacter.get(i).getText().equals(Character.toString(wordString.charAt(i)))) {
                                arrayCharacter.get(i).setForeground(Color.GREEN);
                            } else {
                                arrayCharacter.get(i).setForeground(Color.RED);
                            }
                        }
                        if (level == 2 || level == 3) {
                            JOptionPane.showMessageDialog(null, spellText.getText());
                        } else if (level == 4 || level == 5 || level == 6) {
                            playSound();
                            JOptionPane.showMessageDialog(null, spellText.getText());
                        }
                    }
                    break;
                case 3:
                    if (level == 7) {
                        //level  7
                        //Thuật toán LCS
                        JOptionPane.showMessageDialog(null, "Xâu con chung dài nhất: " + LCS(level7.getText(), wordString.replaceAll("\\s", "")));

                    } else {
                        //các level từ 1-6
                        for (int i = 1; i < arrayCharacter.size() - 1; i++) {
                            if (arrayCharacter.get(i).getText().equals(Character.toString(wordString.charAt(i)))) {
                                arrayCharacter.get(i).setForeground(Color.GREEN);
                            } else {
                                arrayCharacter.get(i).setForeground(Color.RED);
                            }
                        }
                        if (level == 2 || level == 3) {
//                            JOptionPane.showMessageDialog(null, spellText.getText());
                        } else if (level == 4 || level == 5 || level == 6) {
                            playSound();
//                            JOptionPane.showMessageDialog(null, spellText.getText());
                        }
                    }
                    break;
                case 4:
                    JOptionPane.showMessageDialog(null, "Incorrect !!!");
                    break;
            }
        }
    }
}
