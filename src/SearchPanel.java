
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author admin
 */
public class SearchPanel extends javax.swing.JPanel {

    String querylString = "SELECT id,word,mean,spell,hasgtag,type FROM " + DBUtil.TABLE_NAME;
    public static Integer currentId;
    private Integer id[];

    /**
     * Creates new form SearchPanel
     */
    public SearchPanel() {

        initComponents();
        show_word(querylString + " ORDER BY word");
    }
//Hàm query danh sách các từ
    public ArrayList<WordModel> wordList(String query) {
        ArrayList<WordModel> wordList = new ArrayList<>();
        Connection con = DBUtil.getConnection();
        Statement st;
        ResultSet rs;
        try {
            st = con.createStatement();
            rs = st.executeQuery(query);
            WordModel word;
            while (rs.next()) {
                word = new WordModel(rs.getInt("id"), rs.getString("word"), rs.getString("mean"), rs.getString("spell"), rs.getString("hasgtag").substring(0, rs.getString("hasgtag").length() - 1), rs.getString("type"));
                wordList.add(word);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return wordList;
    }
//Hiển thị các từ ra bảng
    public void show_word(String orderQuery) {
        ArrayList<WordModel> list = wordList(orderQuery);
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Word", "Mean", "Spell", "Hashtag", "Type"});
        Object[] row = new Object[5];
        id = new Integer[list.size()];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getWord();
            row[1] = list.get(i).getMean();
            row[2] = list.get(i).getSpell();
            row[3] = list.get(i).getHashtag();
            row[4] = list.get(i).getType();
            model.addRow(row);
            id[i] = list.get(i).getId();
        }
        Table_display.setModel(model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchBox = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table_display = new javax.swing.JTable();

        setBackground(new java.awt.Color(51, 102, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nhập từ cần tìm kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        searchBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBoxKeyReleased(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/detail/icons8_rewind_filled_25px.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Table_display.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table_display.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_displayMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Table_display);
        if (Table_display.getColumnModel().getColumnCount() > 0) {
            Table_display.getColumnModel().getColumn(0).setResizable(false);
            Table_display.getColumnModel().getColumn(1).setResizable(false);
            Table_display.getColumnModel().getColumn(2).setResizable(false);
            Table_display.getColumnModel().getColumn(3).setResizable(false);
            Table_display.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(searchBox)
                .addGap(91, 91, 91))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                .addGap(34, 34, 34))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(354, 354, 354))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Nút quay lại màn hình chính
        JFrame parent = Utitilities.findJFrameOf(this);
        if (parent != null) {
            parent.getContentPane().removeAll();
            parent.setContentPane(new MenuPanelrm());
            parent.pack();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void Table_displayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_displayMouseClicked
        //Nút hiển thị chi tiết từ
        int index = Table_display.getSelectedRow();
        currentId = this.id[index];
        JFrame parent = Utitilities.findJFrameOf(this);
        if (parent != null) {
            parent.getContentPane().removeAll();
            parent.setContentPane(new WordDetail());
            parent.pack();
        }

    }//GEN-LAST:event_Table_displayMouseClicked

    private void searchBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBoxKeyReleased
        //Hàm search từ
        if (!searchBox.getText().equals("")) {
            show_word(querylString + " WHERE word LIKE '" + searchBox.getText() + "%'");
        } else {
            show_word(querylString + " ORDER BY word");
        }
    }//GEN-LAST:event_searchBoxKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table_display;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField searchBox;
    // End of variables declaration//GEN-END:variables

}
